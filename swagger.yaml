openapi: 3.0.0
info:
  title: CoffeeCom API
  description: |
    API documentation for the CoffeeCom e-commerce backend
    
    ## Testing
    This API can be tested using our [APIdog Collection](https://5x7k4qnq6a.apidog.io)
  version: 1.0.0
  contact:
    name: CoffeeCom Support
    email: support@coffeecom.example
servers:
  - url: https://nosy-saba-enclosure-cd2f8430.koyeb.app
    description: Production Server
  - url: http://localhost:5000
    description: Local Development Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: coffeeuser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        role:
          type: string
          enum: [user, seller, admin]
          example: user
        address:
          type: string
          example: 123 Coffee St, City
        phone_number:
          type: string
          example: 555-123-4567
    
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Ethiopian Arabica
        description:
          type: string
          example: Premium coffee beans from Ethiopia
        price:
          type: number
          format: float
          example: 15.99
        category_id:
          type: integer
          format: int64
          example: 2
        image_url:
          type: string
          format: uri
          example: https://example.com/images/coffee.jpg
        is_available:
          type: boolean
          example: true
        discount_percentage:
          type: number
          format: float
          example: 5.0
        weight:
          type: string
          example: 250g
        dimensions:
          type: string
          example: 10x5x15cm
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Coffee Beans
        description:
          type: string
          example: Various types of coffee beans
    
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 2
        quantity:
          type: integer
          example: 2
        product:
          $ref: '#/components/schemas/Product'
    
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
          format: float
          example: 31.98
    
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          example: processing
        total:
          type: number
          format: float
          example: 31.98
        shipping_address:
          type: string
          example: 123 Coffee St, City
        payment_method:
          type: string
          example: credit_card
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        order_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 2
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 15.99
        product_name:
          type: string
          example: Ethiopian Arabica
    
    Error:
      type: object
      properties:
        msg:
          type: string
          example: An error occurred
    
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: healthy
        version:
          type: string
          example: 1.0.0
        database:
          type: string
          example: connected
        uptime:
          type: number
          example: 3600
        memory_usage:
          type: object
          properties:
            total:
              type: string
              example: 512MB
            used:
              type: string
              example: 128MB
            percent:
              type: number
              example: 25.0

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with the provided information
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                username:
                  type: string
                  example: coffeeuser
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                role:
                  type: string
                  enum: [user, seller]
                  default: user
                  example: user
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User registered successfully
                  role:
                    type: string
                    example: user
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/login:
    post:
      summary: User login
      description: Authenticate a user and return an access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
                      username:
                        type: string
                        example: coffeeuser
                      role:
                        type: string
                        example: user
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/profile:
    get:
      summary: Get user profile
      description: Retrieve the current user's profile information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Update the current user's profile information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                username:
                  type: string
                  example: coffeeuser
                address:
                  type: string
                  example: 123 Coffee St, City
                phone_number:
                  type: string
                  example: 555-123-4567
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Profile updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/delete:
    delete:
      summary: Delete user account
      description: Delete the current user's account
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Account deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/products/:
    get:
      summary: Get all products
      description: Retrieve a list of all available products
      tags:
        - Products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    
    post:
      summary: Create a new product
      description: Create a new product (requires seller role)
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
              properties:
                name:
                  type: string
                  example: Ethiopian Arabica
                description:
                  type: string
                  example: Premium coffee beans from Ethiopia
                price:
                  type: number
                  format: float
                  example: 15.99
                category_id:
                  type: integer
                  format: int64
                  example: 2
                image_url:
                  type: string
                  format: uri
                  example: https://example.com/images/coffee.jpg
                is_available:
                  type: boolean
                  example: true
                discount_percentage:
                  type: number
                  format: float
                  example: 0
                weight:
                  type: string
                  example: 250g
                dimensions:
                  type: string
                  example: 10x5x15cm
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Product created
                  id:
                    type: integer
                    example: 1
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Seller access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/products/{product_id}:
    parameters:
      - name: product_id
        in: path
        required: true
        description: ID of the product
        schema:
          type: integer
    
    get:
      summary: Get product by ID
      description: Retrieve details for a specific product
      tags:
        - Products
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update product
      description: Update an existing product (requires seller role)
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Ethiopian Arabica
                description:
                  type: string
                  example: Premium coffee beans from Ethiopia
                price:
                  type: number
                  format: float
                  example: 17.99
                category_id:
                  type: integer
                  format: int64
                  example: 2
                image_url:
                  type: string
                  format: uri
                  example: https://example.com/images/coffee.jpg
                is_available:
                  type: boolean
                  example: true
                discount_percentage:
                  type: number
                  format: float
                  example: 5
                weight:
                  type: string
                  example: 250g
                dimensions:
                  type: string
                  example: 10x5x15cm
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Product updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Seller access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete product
      description: Delete an existing product (requires seller role)
      tags:
        - Products
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Product deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Seller access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/cart:
    get:
      summary: View cart
      description: Retrieve the current user's shopping cart
      tags:
        - Transactions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/cart/add:
    post:
      summary: Add to cart
      description: Add a product to the shopping cart
      tags:
        - Transactions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - quantity
              properties:
                product_id:
                  type: integer
                  format: int64
                  example: 1
                quantity:
                  type: integer
                  example: 2
      responses:
        '200':
          description: Product added to cart or quantity updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Product added to cart
                  cart_item:
                    $ref: '#/components/schemas/CartItem'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/cart/remove/{item_id}:
    parameters:
      - name: item_id
        in: path
        required: true
        description: ID of the cart item
        schema:
          type: integer
    
    delete:
      summary: Remove from cart
      description: Remove an item from the shopping cart
      tags:
        - Transactions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Item removed from cart
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/orders:
    get:
      summary: Get order history
      description: Retrieve the user's order history
      tags:
        - Transactions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Order history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create order
      description: Create a new order from cart items
      tags:
        - Transactions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shipping_address
                - payment_method
              properties:
                shipping_address:
                  type: string
                  example: 123 Coffee St, City, Country
                payment_method:
                  type: string
                  example: credit_card
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Order created
                  order_id:
                    type: integer
                    example: 1
        '400':
          description: Missing required fields or empty cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/orders/{order_id}:
    parameters:
      - name: order_id
        in: path
        required: true
        description: ID of the order
        schema:
          type: integer
    
    get:
      summary: Get order details
      description: Retrieve details for a specific order
      tags:
        - Transactions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/admin/users:
    get:
      summary: Get all users
      description: Retrieve a list of all users (requires admin role)
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/admin/stats:
    get:
      summary: Get system stats
      description: Retrieve system statistics (requires admin role)
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: integer
                    example: 150
                  products:
                    type: integer
                    example: 75
                  orders:
                    type: integer
                    example: 200
                  revenue:
                    type: number
                    format: float
                    example: 12500.50
                  top_products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Ethiopian Arabica
                        sales:
                          type: integer
                          example: 45
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/monitoring/health:
    get:
      summary: Health check
      description: Check the health status of the system
      tags:
        - Monitoring
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
