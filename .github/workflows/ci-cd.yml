name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions needed for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      env:
        SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret-key
      run: |
        pytest --cov=app tests/
        
  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=sha,format=long
          type=ref,event=branch
          latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy-to-koyeb:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Koyeb CLI
      run: |
        # Download the Koyeb CLI directly
        mkdir -p /tmp/koyeb
        curl -L "https://github.com/koyeb/koyeb-cli/releases/download/v3.3.0/koyeb-cli_3.3.0_linux_amd64.tar.gz" -o /tmp/koyeb/koyeb.tar.gz
        tar -xzf /tmp/koyeb/koyeb.tar.gz -C /tmp/koyeb
        sudo mv /tmp/koyeb/koyeb /usr/local/bin/
        chmod +x /usr/local/bin/koyeb
        # Verify installation
        koyeb --help
        
    - name: Deploy to Koyeb
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_API_TOKEN }}
      run: |
        # Get the latest image tag
        IMAGE_TAG="ghcr.io/${{ github.repository }}:latest"
        
        # Verify Koyeb CLI is available
        if ! command -v koyeb &> /dev/null; then
          echo "ERROR: Koyeb CLI not found in PATH"
          echo "PATH: $PATH"
          echo "Contents of /usr/local/bin:"
          ls -la /usr/local/bin
          exit 1
        fi
        
        echo "Koyeb CLI found at $(which koyeb)"
        
        # Check if app exists, create if not
        echo "Checking if Koyeb app exists..."
        if ! koyeb app get coffeecom-backend &>/dev/null; then
          echo "Creating Koyeb app: coffeecom-backend"
          koyeb app create coffeecom-backend
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to create Koyeb app"
            exit 1
          fi
        else
          echo "Koyeb app coffeecom-backend already exists"
        fi
        
        # Verify secrets are available (without printing values)
        echo "Checking if required secrets are set..."
        if [ -z "${{ secrets.SECRET_KEY }}" ]; then
          echo "ERROR: SECRET_KEY is not set in GitHub secrets"
          exit 1
        else
          echo "SECRET_KEY is set"
        fi
        
        if [ -z "${{ secrets.JWT_SECRET_KEY }}" ]; then
          echo "ERROR: JWT_SECRET_KEY is not set in GitHub secrets"
          exit 1
        else
          echo "JWT_SECRET_KEY is set"
        fi
        
        if [ -z "${{ secrets.SQLALCHEMY_DATABASE_URI }}" ]; then
          echo "ERROR: SQLALCHEMY_DATABASE_URI is not set in GitHub secrets"
          exit 1
        else
          echo "SQLALCHEMY_DATABASE_URI is set"
        fi
        
        # Deploy or update service
        echo "Deploying to Koyeb..."
        if koyeb service get api --app coffeecom-backend &>/dev/null; then
          echo "Updating existing service..."
          koyeb service update api \
            --app coffeecom-backend \
            --docker $IMAGE_TAG \
            --env SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --env JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            --env SQLALCHEMY_DATABASE_URI="${{ secrets.SQLALCHEMY_DATABASE_URI }}" \
            --env FLASK_ENV=production
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to update Koyeb service"
            exit 1
          fi
        else
          echo "Creating new service..."
          koyeb service create api \
            --app coffeecom-backend \
            --docker $IMAGE_TAG \
            --ports 5000:http \
            --env SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --env JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            --env SQLALCHEMY_DATABASE_URI="${{ secrets.SQLALCHEMY_DATABASE_URI }}" \
            --env FLASK_ENV=production \
            --routes /:5000
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to create Koyeb service"
            exit 1
          fi
        fi
        
        echo "Deployment to Koyeb completed successfully!"
